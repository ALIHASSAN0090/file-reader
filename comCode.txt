const express = require("express");
const path = require("path");
const bodyParser = require("body-parser");
const fs = require('fs');
const multer = require("multer");

const app = express();

app.set('view engine', 'ejs');
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static("public"));

// Set up multer for file uploads
const upload = multer({ dest: 'uploads/' });

app.get('/', function(req, res) {
    res.render("home", {
        value1: '0',
        value2: '0',
        value3: '0',
        value4: '0',
        value5: '0'
    });
});

app.post("/Analyze", upload.single('textFile'), function(req, res) {
    const filePath = req.file.path;

    analyzeFile(filePath, (err, result) => {
        if (err) {
            console.error(err);
            return res.send('Error analyzing file.');
        }

        res.render('home', {
            value1: result.totalLetters,
            value2: result.capitalLetters,
            value3: result.smallLetters,
            value4: result.vowels,
            value5: result.totalSpaces
        });

        // Clean up the uploaded file after processing
        fs.unlink(filePath, (err) => {
            if (err) console.error("Error deleting file:", err);
        });
    });
});

function analyzeText(text) {
    const result = {
        vowels: 0,
        capitalLetters: 0,
        smallLetters: 0,
        totalLetters: 0,
        totalSpaces: 0
    };

    const vowels = "AEIOUaeiou";

    for (let char of text) {
        if (vowels.includes(char)) {
            result.vowels++;
        }
        if (char >= 'A' && char <= 'Z') {
            result.capitalLetters++;
            result.totalLetters++;
        } else if (char >= 'a' && char <= 'z') {
            result.smallLetters++;
            result.totalLetters++;
        } else if (char === ' ') {
            result.totalSpaces++;
        }
    }
    return result;
}

function analyzeFile(filePath, callback) {
    fs.readFile(filePath, 'utf8', (err, data) => {
        if (err) {
            console.error("Error reading file:", err);
            return callback(err);
        }
        const result = analyzeText(data);
        callback(null, result);
    });
}

app.listen(3000, function() {
    console.log("Server running on port 3000");
});
